/*
It works when the input is List

val inputArr: List[Any] = List(5, 2, List(7, -1), 3, List(6, List(-13, 8), 4))
Solution.productSum(inputArr)
*/

object Solution {
  def productSum(inputArr: List[Any], depth: Int = 1): Int = {
    var sum: Int = 0
    for (el <- inputArr) {
      if (el.isInstanceOf[List[Any]]) {
        val ls: List[Any] = el.asInstanceOf[List[Any]]
        sum += productSum(ls, depth + 1)
      } else {
        sum += el.toString.toInt
      }
    }
    sum * depth
  }
}

/*
does not work when the input is Array[Any]

compiler says 
error number format exception
because array is a flat data structure
if define an array of type any
every item inside will be of type any, the Array will be of type any too
type any can't be identified as an instance of Array[Any]
it would be converted to string, which would be an object of this array of some numbers
which can't be turned into int directly. that's why error occurs

list works because it is a linked list data structure
things inside the list have its original format 
arrays can be identified as array

val inputArr: Array[Any] = Array(5, 2, Array(7, -1), 3, Array(6, Array(-13, 8), 4))
Solution.productSum(inputArr)

*/

object Solution {
  def productSum(inputArr: Array[Any], depth: Int = 1): Int = {
    var sum: Int = 0
    for (el <- inputArr) {
      if (el.isInstanceOf[Array[Int]]) {
        val ls: Array[Any] = el.asInstanceOf[Array[Any]]
        sum += productSum(ls, depth + 1)  }
      if (el.isInstanceOf[Array[Any]]) {
        val ls: Array[Any] = el.asInstanceOf[Array[Any]]
        sum += productSum(ls, depth + 1)  }
      else {
        sum += el.toString.toInt
      }
    }
    sum * depth
  }
}